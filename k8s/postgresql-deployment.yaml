
#   Deploying Postgresql on K8s
#   - Create the Volumes
#   - Create database secrets 
#   - Create Deployment resource 
#   - Create the service resource 

# Persistent Volume
# - Needed to persist this data so that an application 
# can access and use it anytime. 
# - When deploying a db service to k8s, a pod is set to a volume to persist your data 
#
#
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgresdb-volume
  labels:
    type: local
    app: postgresdb

spec:
  capacity:
    # PV storage capacity 
    storage: 1Gi
  # Db can write and read from volumes to multiple pods
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  storageClassName: manual
  hostPath:
    path: "data/db"
  
---
#
# Persistent Volume Claim
# TO allow a cluster to request access to the data storage,
# you need to set up a PersistentVolumeClaim (PVC) to the volume
#  
# It ensures the pods created within the designated cluster can access a volume to store data 
#
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresdb-claim
  namespace: default
  labels:
    app: postgresdb-claim
spec:
  storageClassName: manual
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi


---
# Database Config
# Databases require access controll using password and users.
# - You can use Kubernetes to create these credential
# - To do this, use ConfigMap to create environment variables to store the database configurations
#
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresdb-config
  labels:
    app: postgresdb
data:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  POSTGRES_DB: db
  init.sql: |
    CREATE DATABASE IF NOT EXISTS new_accountsdb;
    CREATE DATABASE IF NOT EXISTS ordersdb;
    CREATE DATABASE IF NOT EXISTS productdb;
    CREATE DATABASE IF NOT EXISTS shopping_cart_db;


---

# Deployment resources creates and manages a set of replicas of 
# of a pod to run an application on Kubernetes 
# - It specifies all the needed artifacts to execute the application 
# - It also allows yoou to add volumes to the pods on the cluster 
#
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name:  postgresdb
#   labels:
#     app:  postgresdb
# spec:
#   selector:
#     matchLabels:
#       app: postgresdb
#   replicas: 3
#   template:
#     metadata:
#       labels:
#         app:  postgresdb
#     spec:
#       # initContainers:
#         # Init containers are exactly like regular containers, except:
#           # - Init containers always run to completion.
#           # - Each init container must complete successfully before the next one starts.
#       containers:
#       - name:  postgresdb
#         image:  postgres:13
#         ports:
#         - containerPort:  5432
#           name:  postgresdb
#         # Load the environment variables / PostgresSQL credentials
#         envFrom:
#           - configMapRef: 
#             name: postgresdb-config
#         # The volume mounts for the container
#         volumeMounts:
#         - name: db-data
#           mountPath: /var/lib/postgres/data
      
#       # Volumes attached to the pod
#       volumes:
#         - name: db-data
#           persistentVolumeClaim:  
#             claimName: postgresdb-claim

#
#
# StatefulSets 
# - Run one or more pods with a persistent ID and persistent 
# volumes, which is suitable for running stateful applications
#
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresdb
  namespace: default
spec:
  selector:
    matchLabels:
      app: postgresdb # has to match .spec.template.metadata.labels
  serviceName: "postgresdb"
  replicas: 1 # by default is 1
  template:
    metadata:
      labels:
        app: postgresdb # has to match .spec.selector.matchLabels
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: postgresdb
        image: postgresdb:13
        ports:
        - containerPort: 5432
          name: postgresdb
        volumeMounts:
        - name: db-data
          mountPath: /var/lib/postgres/data
      
      volumes:
        # Volume to claim 
        - name: db-data
          persistentVolumeClaim:  
            claimName: postgresdb-claim
        # config
        - name: postgresdb-config
          configMap: 
            name: postgresdb-config


---
# Service Resource 
# A service exposes a deployment. It providesa stable network  
# endpoint for accessing a cluster.
#
#
apiVersion: v1
kind: Service
metadata:
  name: postgresdb
  labels:
    app: postgresdb
spec:
  selector:
    app: postgresdb
  # Choose how to expose your service 
  type: NodePort
  ports:
  - name: postgresdb
    port: 5432 